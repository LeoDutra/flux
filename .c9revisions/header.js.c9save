{"ts":1349463522462,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Flux JavaScript Library\n * Copyright (c) 2010 Leonardo Dutra Constancio\n * MIT License (http://jsflux.googlecode.com/svn/trunk/mit-license.txt)\n */\nvar flux = {};\n\nvar PI = Math.PI,\n    PIx2  = PI * 2,\n    _;\n    \n\nfunction ceil(n) {\n    return n % 1 ? (n > 0 ? n + 1 : n) | 0 : n;\n}\n\nfunction floor(n) {\n    return n % 1 ? (n > 0 ? n : n - 1) | 0 : n;\n}\n\nfunction abs(n) {\n    return 0 > n ? -n : n;\n}\nfunction round(n) {\n    return(0 > n ? -0.5 : 0.5) + n | 0;\n}\n\nfunction max(a, b) {\n    return a < b ? b : a;\n}\n\nfunction min(a, b) {\n    return a < b ? a : b;\n}\n\nfunction clamp(n, min, max) {\n\treturn min < n ? n < max ? n : max : min;\n}\n\nfunction randomFrom(min, max) {\n    return Math.random() * (max - min) + min; \n}\n\n//function sign(x) {\n//    return x > 0 ? 1 : x < 0 ? -1 : 0;\n//}\n\nfunction extend(super_, extension)\n{\n    var base = function () {};\n    base.prototype = new super_();\n    base = new base();\n    for (var property in extension)\n    {\n        base[property] = extension[property];\n    }\n    base.super_ = super_;\n    return base;\n}\n\nfunction deepCopyArray (array)\n{\n    return array instanceof Array ? JSON.parse(JSON.stringify(array)) : null;\n}"]],"start1":0,"start2":0,"length1":0,"length2":1175}]],"length":1175}
{"contributors":[],"silentsave":false,"ts":1349463534891,"patch":[[{"diffs":[[0," = {};\n\n"],[1,"\n"],[0,"var PI ="]],"start1":162,"start2":162,"length1":16,"length2":17}]],"length":1176,"saved":false}
{"ts":1349463550973,"patch":[[{"diffs":[[0,"xt)\n */\n"],[1," \n"],[0,"var flux"]],"start1":146,"start2":146,"length1":16,"length2":18},{"diffs":[[0," = {};\n\n"],[1,"(function(window, undefined) {\n    "],[0,"\nvar PI "]],"start1":164,"start2":164,"length1":16,"length2":51}]],"length":1213,"saved":false}
