{"ts":1349414891170,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Flux JavaScript Library\n * Copyright (c) 2010 Leonardo Dutra Constancio\n * MIT License (http://jsflux.googlecode.com/svn/trunk/mit-license.txt)\n */\n\nflux.Node = function ()\n{\n    if (this instanceof flux.Node) {\n        this._children = [];\n        this.setIntensity(1);\n    }\n};\n\nflux.Node.prototype = {\n\n    x: 0,\n    y: 0,\n    scaleX: 1,\n    scaleY: 1,\n    rotation: 0,\n    name: '',\n    hidden: false,\n    _parent: null,\n    _children: null,\n    _intensity: 1,\n\n    setXY: function (x, y)\n    {\n        this.x = x;\n        this.y = y;\n    },\n\n    getGlobalXY: function ()\n    {\n        var x = this.x;\n        var y = this.y;\n        var o = this._parent;\n        while (o)\n        {\n            x += o.x;\n            y += o.y;\n            o = o._parent;\n        }\n        return new flux.V2(x, y);\n    },\n\n    setAngle: function (angle)\n    {\n        this.rotation = 6.283185307179586 * angle / 360; // 6.283185307179586 = Math.PI * 2;\n    },\n\n    getAngle: function ()\n    {\n        return this.rotation * 360 / 6.283185307179586; // 6.283185307179586 = Math.PI * 2;\n    },\n\n    setIntensity: function (intensity)\n    {\n        // MUST avoid NaN\n        this._intensity = intensity < 1 ? 0 < intensity ? intensity : 0 : 1;\n    },\n\n    getIntensity: function ()\n    {\n        return this._intensity;\n    },\n\n//    getBounds: function (recursive) // TODO\n//    {\n//        var rect = arguments[1] || new flux.Rectangle(0, 0, 0, 0);\n//        if(recursive)\n//        {\n//            var cache;\n//            var i = (cache = this._children).length;\n//            while(i--)\n//            {\n//                cache[i].getBounds(recursive, rect, 1/*its not origin*/);\n//            }\n//            if(arguments[2]/*its origin?*/ && rect.isEmpty())\n//            {\n//                rect.x = rect.y = 0;\n//            }\n//        }\n//        return rect;\n//    },\n\n    getRoot: function ()\n    {\n        var o = this;\n        while((o = o._parent));\n        return o;\n    },\n\n    getParent: function ()\n    {\n        return this._parent;\n    },\n\n    getChild: function (index)\n    {\n        return this._children[index];\n    },\n\n    getChildByName: function (name)\n    {\n        if (name)\n        {\n            var children = this._children;\n            var i = children.length;\n            while (i--)\n            {\n                if (children[i].name === name) return i;\n            }\n        }\n        return null;\n    },\n\n    getChildIndex: function (child)\n    {\n        return this._children.indexOf(child);\n    },\n\n    getNumChildren: function ()\n    {\n        return this._children.length;\n    },\n\n    addChild: function (child)\n    {\n        if (child instanceof flux.Node)\n        {\n            child.remove();\n            (child._parent = this)._children.push(child);\n        }\n    },\n\n    addChildAt: function (child, index)\n    {\n        \n        if (-1 < index && child instanceof flux.Node)\n        {\n            child.remove();\n            this._children.splice(index, 0, child);\n            child._parent = this;\n        }\n    },\n\n    remove: function ()\n    {\n        if (this._parent) this._parent.removeChild(this);\n    },\n\n    removeChild: function (child)\n    {\n        var i = this._children.indexOf(child);\n        if (~i)\n        {\n            this._children.splice(i, 1)[0]._parent = null;\n        }\n    },\n\n    removeChildAt: function (index)\n    {\n        if (-1 < index)\n        {\n            if (index = this._children.splice(index, 1)[0]) index._parent = null;\n        }\n    },\n\n    removeAll: function ()\n    {\n        var children = this._children;\n        var i = children.length;\n        while (i--)\n        {\n            children[i]._parent = null; // SHALL NOT use \"delete\"\n        }\n        this._children = [];\n    },\n\n    setChildIndex: function (child, index)\n    {\n        if (child && child._parent === this) this.addChildAt(child, index);\n    },\n\n    swapChildren: function (child, anotherChild)\n    {\n        var children = this._children;\n        if (~(child = children.indexOf(child)) && ~(anotherChild = children.indexOf(anotherChild)))\n        {\n            child = children[child];\n            children[child] = children[anotherChild];\n            children[anotherChild] = child;\n        }\n    },\n\n    swapChildrenAt: function (index, anotherIndex)\n    {\n        var children = this._children;\n        var length = children.length;\n        if (-1 < index && index < length && -1 < anotherIndex && anotherIndex < length)\n        {\n            length = children[index];\n            children[index] = children[anotherIndex];\n            children[anotherIndex] = length;\n        }\n    },\n\n    update: function (delay)\n    {\n\n        }\n   \n};"]],"start1":0,"start2":0,"length1":0,"length2":4694}]],"length":4694}
{"contributors":[],"silentsave":false,"ts":1349414923209,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    if (this instanceof flux.Node) {\n    "],[0,"    "]],"start1":177,"start2":177,"length1":49,"length2":8},{"diffs":[[0,"n = [];\n"],[-1,"    "],[0,"    this"]],"start1":198,"start2":198,"length1":20,"length2":16},{"diffs":[[0,"ity(1);\n"],[-1,"    }\n"],[0,"};\n\nflux"]],"start1":224,"start2":224,"length1":22,"length2":16}]],"length":4643,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349460592166,"patch":[[{"diffs":[[0," scaleY: 1,\n"],[1,"    skewX: 0,\n    skewY: 0,\n"],[0,"    rotation"]],"start1":299,"start2":299,"length1":24,"length2":52}]],"length":4671,"saved":false}
{"ts":1349460649641,"patch":[[{"diffs":[[0,"is.y = y;\n    },"],[1,"\n    \n    scaleXY: function(x, y) {\n    \n    },"],[0,"\n\n    getGlobalX"]],"start1":512,"start2":512,"length1":32,"length2":79}]],"length":4718,"saved":false}
{"ts":1349460661039,"patch":[[{"diffs":[[0,"x, y) {\n    "],[1,"    this.scaleX = x;\n        this.scaleY = y;"],[0,"\n    },\n\n   "]],"start1":556,"start2":556,"length1":24,"length2":69}]],"length":4763,"saved":false}
{"ts":1349460695274,"patch":[[{"diffs":[[0,"  },"],[-1,"\n    \n    scaleXY: function(x, y) {\n        this.scaleX = x;\n        this.scaleY = y;\n    },"],[0,"\n\n  "]],"start1":524,"start2":524,"length1":100,"length2":8}]],"length":4671,"saved":false}
{"ts":1349460888999,"patch":[[{"diffs":[[0,"is.y = y;\n    },"],[1,"\n    setXYV2: flux.V2.prototype.set,"],[0,"\n\n    getGlobalX"]],"start1":512,"start2":512,"length1":32,"length2":68}]],"length":4707,"saved":false}
{"ts":1349460923562,"patch":[[{"diffs":[[0,"1,\n\n"],[-1,"    setXY: function (x, y)\n    {\n        this.x = x;\n        this.y = y;\n    },\n"],[0,"    "]],"start1":445,"start2":445,"length1":88,"length2":8}]],"length":4627,"saved":false}
{"ts":1349460959301,"patch":[[{"diffs":[[0,"ty: 1,\n\n"],[1,"    setXY: function (x, y)\n    {\n        this.x = x;\n        this.y = y;\n    },\n"],[0,"    setX"]],"start1":441,"start2":441,"length1":16,"length2":96}]],"length":4707,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349461581961,"patch":[[{"diffs":[[0,"ngth;\n    },"],[1,"\n    \n    getZIndex: function() {\n        return this._parent ? this._parent.indexOf(this): -1;   \n    }"],[0,"\n\n    addChi"]],"start1":2612,"start2":2612,"length1":24,"length2":128}]],"length":4811,"saved":false}
{"ts":1349461616118,"patch":[[{"diffs":[[0,"  \n    }"],[1,","],[0,"\n\n    ad"]],"start1":2720,"start2":2720,"length1":16,"length2":17}]],"length":4812,"saved":false}
{"ts":1349461887436,"patch":[[{"diffs":[[0," },\n"],[-1,"    \n    getZIndex: function() {\n        return this._parent ? this._parent.indexOf(this): -1;   \n    },"],[0,"\n\n  "]],"start1":2621,"start2":2621,"length1":112,"length2":8}]],"length":4708,"saved":false}
{"ts":1349462149958,"patch":[[{"diffs":[[0,"    },\n\n"],[-1,"\n"],[0,"    addC"]],"start1":2618,"start2":2618,"length1":17,"length2":16}]],"length":4707,"saved":false}
