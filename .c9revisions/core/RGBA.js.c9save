{"ts":1348294705404,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Flux JavaScript Library\n * Copyright (c) 2010 Leonardo Dutra Constancio\n * MIT License (http://jsflux.googlecode.com/svn/trunk/mit-license.txt)\n */\n\n\nflux.RGBA = function (rrggbb, alpha)\n{\n    if (this instanceof flux.RGBA) this.setRGBA(rrggbb, alpha);\n};\n\n\n// STATIC\nflux.RGBA.interpolate = function (beginRGBA, finalRGBA, changeAmount)\n{\n    return new flux.RGBA(((1 - changeAmount) * beginRGBA.r + changeAmount * finalRGBA.r) << 16 | ((1 - changeAmount) * beginRGBA.g + changeAmount * finalRGBA.g) << 8 | (1 - changeAmount) * beginRGBA.b + changeAmount * finalRGBA.b, (1 - changeAmount) * beginRGBA.alpha + changeAmount * finalRGBA.alpha);\n};\n\nflux.RGBA.randomRGB = function ()\n{\n    return new flux.RGBA(Math.random() * 0xFFFFFF);\n};\n\nflux.RGBA.randomRGBA = function ()\n{\n    return new flux.RGBA(Math.random() * 0xFFFFFF, Math.random());\n};\n\nflux.RGBA.prototype = {\n    set: function (rgba)\n    {\n        this.r = rgba.r;\n        this.g = rgba.g;\n        this.b = rgba.b;\n        this.alpha = rgba.alpha;\n    },\n    setRGBA: function (rrggbb, alpha)\n    {\n        this.setRGB(rrggbb);\n        this.setAlpha(alpha);\n    },\n    setRGB: function (rrggbb)\n    {\n        this.r = rrggbb >> 16 & 255;\n        this.g = rrggbb >> 8 & 255;\n        this.b = rrggbb & 255;\n    },\n\n    randomRGB: function ()\n    {\n        this.setRGB(Math.random() * 0xFFFFFF);\n    },\n\n    randomRGBA: function ()\n    {\n        this.setRGBA(Math.random() * 0xFFFFFF, Math.random());\n    },\n\n    setAlpha: function (alpha /*= 1*/ )\n    {\n        this.alpha = alpha < 1 ? 0 < alpha ? alpha : 0 : 1; /*This MUST avoid NaN*/\n    },\n\n    getRGB: function ()\n    {\n        return this.r << 16 | this.g << 8 | this.b;\n    },\n\n    getARGB: function ()\n    {\n        return (this.alpha * 255 << 24) | this.getRGB();\n    },\n\n    getAlpha: function ()\n    {\n        return this.alpha;\n    },\n\n    interpolateSelf: function (finalRGBA, changeAmount)\n    {\n        this.r = (1 - changeAmount) * this.r + changeAmount * finalRGBA.r;\n        this.g = (1 - changeAmount) * this.g + changeAmount * finalRGBA.g;\n        this.b = (1 - changeAmount) * this.b + changeAmount * finalRGBA.b;\n        this.alpha = (1 - changeAmount) * this.alpha + changeAmount * finalRGBA.alpha;\n    },\n\n    toCSSHex: function ()\n    {\n        return '#' + ('00000' + this.getRGB().toString(16)).substr(-6);\n    },\n\n    toCSSRGBA: function ()\n    {\n        return 'rgba(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + this.alpha + ')';\n    },\n\n    toString: function ()\n    {\n        return this.toCSSRGBA();\n    },\n\n    clone: function ()\n    {\n        return new flux.RGBA(this.getRGB(), this.alpha);\n    }\n};"]],"start1":0,"start2":0,"length1":0,"length2":2658}]],"length":2658}
{"contributors":[],"silentsave":false,"ts":1348503472939,"patch":[[{"diffs":[[0,"\n   "],[-1," if (this instanceof flux.RGBA)"],[0," thi"]],"start1":194,"start2":194,"length1":39,"length2":8}]],"length":2627,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349413996765,"patch":[[{"diffs":[[0,"a);\n};\n\n"],[-1,"\n"],[0,"// STATI"]],"start1":224,"start2":224,"length1":17,"length2":16}]],"length":2626,"saved":false}
