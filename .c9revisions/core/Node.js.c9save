{"ts":1347075139532,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Flux JavaScript Library\n * Copyright (c) 2010 Leonardo Dutra Constancio\n * MIT License (http://jsflux.googlecode.com/svn/trunk/mit-license.txt)\n */\n\nflux.Node = function ()\n{\n    if (this instanceof flux.Node)\n    {\n        this._children = [];\n        this.setIntensity(1);\n    }\n};\n\nflux.Node.prototype = {\n\n    x: 0,\n    y: 0,\n    scaleX: 0,\n    scaleY: 0,\n    rotation: 0,\n    name: '',\n    hidden: false,\n    _parent: null,\n    _children: null,\n    _intensity: 1,\n\n    setXY: function (x, y)\n    {\n        this.x = x;\n        this.y = y;\n    },\n\n    getGlobalXY: function ()\n    {\n        var x = this.x;\n        var y = this.y;\n        var o = this._parent;\n        while (o)\n        {\n            x += o.x;\n            y += o.y;\n            o = o._parent;\n        }\n        return new flux.V2(x, y);\n    },\n\n    setAngle: function (angle)\n    {\n        this.rotation = 6.283185307179586 * angle / 360; // 6.283185307179586 = Math.PI * 2;\n    },\n\n    getAngle: function ()\n    {\n        return this.rotation * 360 / 6.283185307179586; // 6.283185307179586 = Math.PI * 2;\n    },\n\n    setIntensity: function (intensity)\n    {\n        // MUST avoid NaN\n        this._intensity = intensity < 1 ? 0 < intensity ? intensity : 0 : 1;\n    },\n\n    getIntensity: function ()\n    {\n        return this._intensity;\n    },\n\n    getBounds: function (recursive) // TODO\n    {\n        //var rect = arguments[1] || new flux.Rectangle(0, 0, 0, 0);\n        //if(recursive)\n        //{\n        //    var cache;\n        //    var i = (cache = this._children).length;\n        //    while(i--)\n        //    {\n        //        cache[i].getBounds(recursive, rect, 1/*its not origin*/);\n        //    }\n        //    if(arguments[2]/*its origin?*/ && rect.isEmpty())\n        //    {\n        //        rect.x = rect.y = 0;\n        //    }\n        //}\n        //return rect;\n    },\n\n    getRoot: function ()\n    {\n        var o = this._parent;\n        if (o)\n        {\n            while (o._parent)\n            {\n                o = o._parent;\n            }\n        }\n        return o;\n    },\n\n    getParent: function ()\n    {\n        return this._parent;\n    },\n\n    getChild: function (index)\n    {\n        return this._children[index];\n    },\n\n    getChildByName: function (name)\n    {\n        if (name)\n        {\n            var children = this._children;\n            var i = children.length;\n            while (i--)\n            {\n                if (children[i].name === name) return i;\n            }\n        }\n        return null;\n    },\n\n    getChildIndex: function (child)\n    {\n        return this._children.indexOf(child);\n    },\n\n    getNumChildren: function ()\n    {\n        return this._children.length;\n    },\n\n    addChild: function (child)\n    {\n        if (child instanceof flux.Node)\n        {\n            child.remove();\n            (child._parent = this)._children.push(child);\n        }\n    },\n\n    addChildAt: function (child, index)\n    {\n        //if( typeof index === 'number' && -1 < (index >>= 0) && child instanceof flux.Node)\n        if (-1 < parseInt(index, 10) && child instanceof flux.Node)\n        {\n            child.remove();\n            //var children = this._children;\n            //if (index < children.length)\n            //{\n            //    children.splice(index, 0, child);\n            //}\n            //else {\n            //    children[children.length] = child;\n            //}\n            this._children.splice(index, 0, child);\n            child._parent = this;\n        }\n    },\n\n    remove: function ()\n    {\n        if (this._parent) this._parent.removeChild(this);\n    },\n\n    removeChild: function (child)\n    {\n        var i = this._children.indexOf(child);\n        if (i !== -1)\n        {\n            this._children.splice(i, 1)[0]._parent = null;\n        }\n    },\n\n    removeChildAt: function (index)\n    {\n        if (-1 < index)\n        {\n            if (index = this._children.splice(index, 1)[0]) index._parent = null;\n        }\n    },\n\n    removeAll: function ()\n    {\n        var children = this._children;\n        var i = children.length;\n        while (i--)\n        {\n            children[i]._parent = null; // SHALL NOT use \"delete\"\n        }\n        this._children = [];\n    },\n\n    setChildIndex: function (child, index)\n    {\n        if (child && child._parent === this) this.addChildAt(child, index);\n    },\n\n    swapChildren: function (child, anotherChild)\n    {\n        var children = this._children;\n        if ((child = children.indexOf(child)) !== -1 && (anotherChild = children.indexOf(anotherChild)) !== -1)\n        {\n            child = children[child];\n            children[child] = children[anotherChild];\n            children[anotherChild] = child;\n        }\n    },\n\n    swapChildrenAt: function (index, anotherIndex)\n    {\n        var children = this._children;\n        var length = children.length;\n        if (-1 < index && index < length && -1 < anotherIndex && anotherIndex < length)\n        {\n            length = children[index];\n            children[index] = children[anotherIndex];\n            children[anotherIndex] = length;\n        }\n    },\n\n    onEnterFrame: function (context)\n    {\n\n        }\n};"]],"start1":0,"start2":0,"length1":0,"length2":5174}]],"length":5174}
{"contributors":[],"silentsave":false,"ts":1347075973334,"patch":[[{"diffs":[[0,"alXY: function ("],[1,"x, y"],[0,")\n    {\n        "]],"start1":568,"start2":568,"length1":32,"length2":36}]],"length":5178,"saved":false}
{"contributors":[],"silentsave":false,"ts":1348295341225,"patch":[[{"diffs":[[0,"scaleX: "],[-1,"0"],[1,"1"],[0,",\n    sc"]],"start1":340,"start2":340,"length1":17,"length2":17},{"diffs":[[0,"scaleY: "],[-1,"0"],[1,"1"],[0,",\n    ro"]],"start1":355,"start2":355,"length1":17,"length2":17},{"diffs":[[0,"alXY: function ("],[-1,"x, y"],[0,""],[1,""],[0,")\n    {\n        "]],"start1":568,"start2":568,"length1":36,"length2":32},{"diffs":[[0,"ty;\n    },\n\n"],[1,"//"],[0,"    getBound"]],"start1":1311,"start2":1311,"length1":24,"length2":26},{"diffs":[[0,"// TODO\n"],[1,"//"],[0,"    {\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"var rect"]],"start1":1361,"start2":1361,"length1":32,"length2":34},{"diffs":[[0," 0, 0);\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"if(recur"]],"start1":1438,"start2":1438,"length1":26,"length2":26},{"diffs":[[0,"ve)\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"{\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"    "]],"start1":1466,"start2":1466,"length1":30,"length2":30},{"diffs":[[0," cache;\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"    var "]],"start1":1499,"start2":1499,"length1":26,"length2":26},{"diffs":[[0,"length;\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"    whil"]],"start1":1554,"start2":1554,"length1":26,"length2":26},{"diffs":[[0,"--)\n"],[1,"//    "],[0,"        "],[-1,"//    "],[0,"{\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"    "]],"start1":1583,"start2":1583,"length1":34,"length2":34},{"diffs":[[0,"/);\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"    }\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"    "]],"start1":1675,"start2":1675,"length1":34,"length2":34},{"diffs":[[0,"())\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"    {\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"    "]],"start1":1755,"start2":1755,"length1":34,"length2":34},{"diffs":[[0," 0;\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"    }\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"}\n"],[1,"//"],[0,"        "],[-1,"//"],[0,"retu"]],"start1":1810,"start2":1810,"length1":46,"length2":46},{"diffs":[[0,"n rect;\n"],[1,"//"],[0,"    },\n\n"]],"start1":1857,"start2":1857,"length1":16,"length2":18},{"diffs":[[0,"var o = this"],[-1,"._parent"],[0,";\n        if"]],"start1":1914,"start2":1914,"length1":32,"length2":24},{"diffs":[[0,"    "],[-1,"if (o)\n        {\n            while (o._parent)\n            {\n                o = o._parent;\n            }\n        }"],[1,"while((o = o._parent));"],[0,"\n   "]],"start1":1932,"start2":1932,"length1":123,"length2":31},{"diffs":[[0,"    "],[-1,"//if( typeof index === 'number' && -1 < (index >>= 0) && child instanceof flux.Node)\n        if (-1 < parseInt(index, 10) && child instanceof flux.Node)\n        {\n            child.remove();\n            //var children = this._children;\n            //if (index < children.length)\n            //{\n            //    children.splice(index, 0, child);\n            //}\n            //else {\n            //    children[children.length] = child;\n            //}"],[1,"\n        if (-1 < index && child instanceof flux.Node)\n        {\n            child.remove();"],[0,"\n   "]],"start1":2858,"start2":2858,"length1":460,"length2":100},{"diffs":[[0,"if ("],[1,"~"],[0,"i"],[-1," !== -1"],[0,")\n  "]],"start1":3250,"start2":3250,"length1":16,"length2":10},{"diffs":[[0,"    if ("],[1,"~"],[0,"(child ="]],"start1":4000,"start2":4000,"length1":16,"length2":17},{"diffs":[[0,"ld))"],[-1," !== -1"],[0," && "],[1,"~"],[0,"(ano"]],"start1":4038,"start2":4038,"length1":19,"length2":13},{"diffs":[[0,"ld))"],[-1," !== -1"],[0,")\n  "]],"start1":4090,"start2":4090,"length1":15,"length2":8},{"diffs":[[0,"    "],[-1,"onEnterFrame"],[1,"update: function (delay)\n    {\n\n        },\n        \n    draw"],[0,": fu"]],"start1":4646,"start2":4646,"length1":20,"length2":68},{"diffs":[[0,"tion"],[-1," "],[0,"(context"],[-1,")"],[1,", relative) {"],[0,"\n    "],[-1,"{\n"],[1,"    "],[0,"\n   "]],"start1":4716,"start2":4716,"length1":25,"length2":38}]],"length":4763,"saved":false}
{"contributors":[],"silentsave":false,"ts":1348411135994,"patch":[[{"diffs":[[0," {\n\n"],[-1,"        },\n        \n    draw: function(context, relative) {\n        \n"],[0,"    "]],"start1":4678,"start2":4678,"length1":77,"length2":8}]],"length":4694,"saved":false}
{"ts":1348411153281,"patch":[[{"diffs":[[0,"\n\n        }\n"],[1,"   \n"],[0,"};"]],"start1":4680,"start2":4680,"length1":14,"length2":18}]],"length":4698,"saved":false}
