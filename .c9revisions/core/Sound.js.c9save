{"ts":1348294705843,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Flux JavaScript Library\n * Copyright (c) 2010 Leonardo Dutra Constancio\n * MIT License (http://jsflux.googlecode.com/svn/trunk/mit-license.txt)\n */\n/*\n Reference: Three.js (mikael emtinger http://gomo.se/)\n */\n\nflux.Sound = function (sources, radius, volume, loop)\n{\n    if (this instanceof flux.Sound)\n    {\n        this._super_.call(this);\n\n        this.isLoaded = this.isPlaying = false;\n        this.duration = -1;\n        this.radius = radius;\n\n        var audio = this._dom = new Audio();\n        audio.FLUXSound = this;\n        audio.pan = audio.volume = 0;\n        audio.loop = loop === undefined ? true : loop;\n\n        this.sources = sources = sources instanceof Array ? sources : [sources];\n\n        var L = sources.length;\n        var cache;\n        for (var i = 0; i < L;)\n        {\n            cache = sources[i].toLowerCase();\n            cache = cache.indexOf('.mp3') !== -1 ? 'audio/mpeg' : cache.indexOf('.ogg') !== -1 ? 'audio/ogg' : cache.indexOf('.wav') !== -1 ? 'audio/wav' : 0;\n            if (audio.canPlayType(cache))\n            {\n                (cache = document.createElement('source')).src = this.sources[i];\n                audio.appendChild(cache);\n                audio.addEventListener('canplay', this._onLoad, true);\n                audio.load();\n                break;\n                // is it ok?\n            }\n        }\n    }\n};\n\nflux.Sound.prototype = flux.extend(flux.Node, {\n\n    _onLoad: function ()\n    {\n        var sound = this.FLUXSound;\n        if (this.FLUXSound.isLoaded) return;\n        this.removeEventListener('canplay', this._onLoad, true);\n        sound.isLoaded = true;\n        sound.duration = this.duration;\n        if (sound.isPlaying) sound.play();\n    },\n\n    play: function (startTime)\n    {\n\n        this.isPlaying = true;\n        if (this.isLoaded)\n        {\n            this._dom.play();\n            if (startTime) this._dom.currentTime = startTime % this.duration;\n        }\n    },\n\n    pause: function ()\n    {\n\n        this.isPlaying = false;\n        this._dom.pause();\n    },\n\n    stop: function ()\n    {\n\n        this.isPlaying = false;\n        this._dom.pause();\n        this._dom.currentTime = 0;\n    },\n\n    calculateVolumeAndPan: function (cameraRelativePosition)\n    {\n\n        // FIXME\n        /*var distance = cameraRelativePosition.length();\n         if(this.radius < distance)\n    \t this.domElement.volume = 0;\n    \t else\n    \t this.domElement.volume = this.volume * (1 - distance/this.radius);*/\n    }\n\n});"]],"start1":0,"start2":0,"length1":0,"length2":2491}]],"length":2491}
{"contributors":[],"silentsave":false,"ts":1349414008861,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    if (this instanceof flux.Sound)\n    {"],[0,"\n   "]],"start1":269,"start2":269,"length1":49,"length2":8},{"diffs":[[0,"      }\n"],[-1,"    }\n"],[0,"};\n\nflux"]],"start1":1315,"start2":1315,"length1":22,"length2":16}]],"length":2444,"saved":false}
