{"ts":1349405169255,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Flux JavaScript Library\n * Copyright (c) 2010 Leonardo Dutra Constancio\n * MIT License (http://jsflux.googlecode.com/svn/trunk/mit-license.txt)\n */\nflux.V2 = function (x, y)\n{\n    if (this instanceof flux.V2) {\n        if (x) this.x = x;\n        if (y) this.y = y;\n    }\n};\nflux.V2.interpolate = function (vInitial, vFinal, changeAmount)\n{\n    return new flux.V2((1 - changeAmount) * vInitial.x + changeAmount * vFinal.x, (1 - changeAmount) * vInitial.y + changeAmount * vFinal.y);\n};\nflux.V2.prototype = {\n    x: 0,\n    y: 0,\n\n    set: function (v)\n    {\n        this.x = v.x;\n        this.y = v.y;\n    },\n\n    setXY: function (x, y)\n    {\n        this.x = x;\n        this.y = y;\n    },\n    add: function (v)\n    {\n        this.x += v.x;\n        this.y += v.y;\n    },\n    addXY: function (x, y)\n    {\n        this.x += x;\n        this.y += y;\n    },\n    sub: function (v)\n    {\n        this.x -= v.x;\n        this.y -= v.y;\n    },\n    multScalar: function (s)\n    {\n        this.x *= s;\n        this.y *= s;\n    },\n    divScalar: function (s)\n    {\n        this.x /= s;\n        this.y /= s;\n    },\n    min: function (v)\n    {\n        if (v.x < this.x) this.x = v.x;\n        if (v.y < this.y) this.y = v.y;\n    },\n    max: function (v)\n    {\n        if (this.x < v.x) this.x = v.x;\n        if (this.y < v.y) this.y = v.y;\n    },\n    isValid: function ()\n    {\n        return !(isNaN(this.x) || isNaN(this.y)) && isFinite(this.x) && isFinite(this.y);\n    },\n    clone: function ()\n    {\n        return this.isValid() ? new flux.V2(this.x, this.y) : new flux.V2();\n    },\n    lengthSqr: function ()\n    {\n        return this.x * this.x + this.y * this.y;\n    },\n    length: function ()\n    {\n        return Math.sqrt(this.lengthSqr());\n    },\n    interpolate: function (vInitial, vFinal, changeAmount)\n    {\n        this.x = (1 - changeAmount) * vInitial.x + changeAmount * vFinal.x;\n        this.y = (1 - changeAmount) * vInitial.y + changeAmount * vFinal.y;\n    },\n    interpolateSelf: function (vFinal, changeAmount)\n    {\n        this.interpolate(this, vFinal, changeAmount);\n    },\n    normalize: function (length)\n    {\n        if ((length = length || this.length())) this.divScalar(length);\n        else this.x = this.y = 0;\n    },\n    distanceSqr: function (v)\n    {\n        var x = this.x - v.x;\n        return x * x + (v = this.y - v.y) * v;\n    },\n    distance: function (v)\n    {\n        return Math.sqrt(this.distanceSqr(v));\n    },\n    near: function (v, refDistance) /*true if the distance between v1 and v2 is less than dist*/\n    {\n        return this.distanceSqr(v) < refDistance * refDistance;\n    },\n    equals: function (v)\n    {\n        return this.x === v.x && this.y === v.y;\n    },\n    toString: function ()\n    {\n        return 'V2(x=' + this.x + ', y=' + this.y + ')';\n    }\n};"]],"start1":0,"start2":0,"length1":0,"length2":2808}]],"length":2808}
{"contributors":[],"silentsave":false,"ts":1349414022065,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    if (this instanceof flux.V2) {\n    "],[0,"    "]],"start1":178,"start2":178,"length1":47,"length2":8},{"diffs":[[0,"this.x = x;\n"],[-1,"    "],[0,"    if (y) t"]],"start1":193,"start2":193,"length1":28,"length2":24},{"diffs":[[0,".y = y;\n"],[-1,"    }\n"],[0,"};\nflux."]],"start1":220,"start2":220,"length1":22,"length2":16}]],"length":2759,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349462326426,"patch":[[{"diffs":[[0,"xt)\n */\n"],[1,"var flux = {}\n"],[0,"flux.V2 "]],"start1":146,"start2":146,"length1":16,"length2":30}]],"length":2773,"saved":false}
{"ts":1349462450775,"patch":[[{"diffs":[[0,"    }\n};"],[1,"\n\nvar i = 10000;\nvar t= Date.now();\nwhile(i--) new flux.V2(1,1);\nt = Date.now() - t\nconsole.log(t);"]],"start1":2765,"start2":2765,"length1":8,"length2":107}]],"length":2872,"saved":false}
{"ts":1349462460268,"patch":[[{"diffs":[[0," = 10000"],[1,"0"],[0,";\nvar t="]],"start1":2780,"start2":2780,"length1":16,"length2":17}]],"length":2873,"saved":false}
{"ts":1349462473216,"patch":[[{"diffs":[[0,"= 100000"],[1,"0"],[0,";\nvar t="]],"start1":2781,"start2":2781,"length1":16,"length2":17}]],"length":2874,"saved":false}
{"ts":1349462485901,"patch":[[{"diffs":[[0," },\n"],[-1,"    multScalar: function (s)\n    {\n        this.x *= s;\n        this.y *= s;\n    },\n    divScalar: function (s)\n    {\n        this.x /= s;\n        this.y /= s;\n    },\n"],[0,"    "]],"start1":899,"start2":899,"length1":175,"length2":8}]],"length":2707,"saved":false}
{"ts":1349462521549,"patch":[[{"diffs":[[0,"v.y;\n    },\n"],[1,"    multScalar: function (s)\n    {\n        this.x *= s;\n        this.y *= s;\n    },\n    divScalar: function (s)\n    {\n        this.x /= s;\n        this.y /= s;\n    },\n"],[0,"    min: fun"]],"start1":891,"start2":891,"length1":24,"length2":191}]],"length":2874,"saved":false}
{"ts":1349462534679,"patch":[[{"diffs":[[0," */\n"],[-1,"var flux = {}"],[0,"\nflu"]],"start1":150,"start2":150,"length1":21,"length2":8},{"diffs":[[0,"}\n};"],[-1,"\n\nvar i = 1000000;\nvar t= Date.now();\nwhile(i--) new flux.V2(1,1);\nt = Date.now() - t\nconsole.log(t);"]],"start1":2756,"start2":2756,"length1":105,"length2":4}]],"length":2760,"saved":false}
