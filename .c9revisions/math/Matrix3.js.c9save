{"ts":1348294705826,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n/*\n * Flux JavaScript Library\n * Copyright (c) 2010 Leonardo Dutra Constancio\n * MIT License (http://jsflux.googlecode.com/svn/trunk/mit-license.txt)\n */\nflux.V2 = function (x, y)\n{\n    if (this instanceof flux.V2)\n    {\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n};\nflux.V2.interpolate = function (vInitial, vFinal, changeAmount)\n{\n    return new flux.V2((1 - changeAmount) * vInitial.x + changeAmount * vFinal.x, (1 - changeAmount) * vInitial.y + changeAmount * vFinal.y);\n};\nflux.V2.prototype = {\n\n    set: function (v)\n    {\n        this.x = v.x;\n        this.y = v.y;\n    },\n\n    setXY: function (x, y)\n    {\n        this.x = x;\n        this.y = y;\n    },\n    add: function (v)\n    {\n        this.x += v.x;\n        this.y += v.y;\n    },\n    addXY: function (x, y)\n    {\n        this.x += x;\n        this.y += y;\n    },\n    sub: function (v)\n    {\n        this.x -= v.x;\n        this.y -= v.y;\n    },\n    multScalar: function (s)\n    {\n        this.x *= s;\n        this.y *= s;\n    },\n    divScalar: function (s)\n    {\n        this.x /= s;\n        this.y /= s;\n    },\n    min: function (v)\n    {\n        if (v.x < this.x) this.x = v.x;\n        if (v.y < this.y) this.y = v.y;\n    },\n    max: function (v)\n    {\n        if (this.x < v.x) this.x = v.x;\n        if (this.y < v.y) this.y = v.y;\n    },\n    isValid: function ()\n    {\n        return !(isNaN(this.x) || isNaN(this.y)) && isFinite(this.x) && isFinite(this.y);\n    },\n    clone: function ()\n    {\n        return this.isValid() ? new flux.V2(this.x, this.y) : new flux.V2();\n    },\n    lengthSqr: function ()\n    {\n        return this.x * this.x + this.y * this.y;\n    },\n    length: function ()\n    {\n        return Math.sqrt(this.lengthSqr());\n    },\n    interpolate: function (vInitial, vFinal, changeAmount)\n    {\n        this.x = (1 - changeAmount) * vInitial.x + changeAmount * vFinal.x;\n        this.y = (1 - changeAmount) * vInitial.y + changeAmount * vFinal.y;\n    },\n    interpolateSelf: function (vFinal, changeAmount)\n    {\n        this.interpolate(this, vFinal, changeAmount);\n    },\n    normalize: function (length)\n    {\n        if ((length = length || this.length())) this.divScalar(length);\n        else this.x = this.y = 0;\n    },\n    distanceSqr: function (v)\n    {\n        var x = this.x - v.x;\n        return x * x + (v = this.y - v.y) * v;\n    },\n    distance: function (v)\n    {\n        return Math.sqrt(this.distanceSqr(v));\n    },\n    near: function (v, refDistance) /*true if the distance between v1 and v2 is less than dist*/\n    {\n        return this.distanceSqr(v) < refDistance * refDistance;\n    },\n    equals: function (v)\n    {\n        return this.x === v.x && this.y === v.y;\n    },\n    toString: function ()\n    {\n        return 'V2(x=' + this.x + ', y=' + this.y + ')';\n    }\n};"]],"start1":0,"start2":0,"length1":0,"length2":2791}]],"length":2791}
{"contributors":[],"silentsave":false,"ts":1348503693656,"patch":[[{"diffs":[[-1,"/*\n"],[0,"/*\n * Fl"]],"start1":0,"start2":0,"length1":11,"length2":8},{"diffs":[[0,")\n{\n"],[-1,"    if (this instanceof flux.V2)\n    {\n    "],[0,"    "]],"start1":178,"start2":178,"length1":51,"length2":8},{"diffs":[[0,"x || 0;\n"],[-1,"    "],[0,"    this"]],"start1":195,"start2":195,"length1":20,"length2":16},{"diffs":[[0,"y || 0;\n"],[-1,"    }\n"],[0,"};\nflux."]],"start1":216,"start2":216,"length1":22,"length2":16}]],"length":2735,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349404013051,"patch":[[{"diffs":[[0,"lux."],[-1,"V2 = function (x, y)\n{\n    this.x = x || 0;\n    this.y = y || 0;\n};\nflux.V2.interpolate = function (vInitial, vFinal, changeAmount)\n{\n    return new flux.V2((1 - changeAmount) * vInitial.x + changeAmount * vFinal.x, (1 - changeAmount) * vInitial.y + changeAmount * vFinal.y);\n};\nflux.V2.prototype = {\n\n    set:"],[1,"Matrix ="],[0," fun"]],"start1":155,"start2":155,"length1":318,"length2":16},{"diffs":[[0,"on ("],[-1,"v"],[0,")\n"],[-1,"    "],[0,"{\n    "],[-1,"    this.x = v.x;\n        this.y = v.y;\n    },\n\n    setXY: function (x, y)\n    {\n        this.x = x;\n        this.y = y;\n    },\n    add: function (v)\n    {\n        this.x += v.x;\n        this.y += v.y;\n    },\n    addXY: function (x, y)\n    {\n        this.x += x;\n        this.y += y;\n    },\n    sub: function (v)\n    {\n        this.x -= v.x;\n        this.y -= v.y;\n    },\n    multScalar: function (s)\n    {\n        this.x *= s;\n        this.y *= s;\n    },\n    divScalar: function (s)\n    {\n        this.x /= s;\n        this.y /= s;\n    },\n    min: function (v)\n    {\n        if (v.x < this.x) this.x = v.x;\n        if (v.y < this.y) this.y = v.y;\n    },\n    max: function (v)\n    {\n        if (this.x < v.x) this.x = v.x;\n        if (this.y < v.y) this.y = v.y;\n    },\n    isValid: function ()\n    {\n        return !(isNaN(this.x) || isNaN(this.y)) && isFinite(this.x) && isFinite(this.y);\n    },\n    clone: function ()\n    {\n        return this.isValid() ? new flux.V2(this.x, this.y) : new flux.V2();\n    },\n    lengthSqr: function ()\n    {\n        return this.x * this.x + this.y * this.y;\n    },\n    length: function ()\n    {\n        return Math.sqrt(this.lengthSqr());\n    },\n    interpolate: function (vInitial, vFinal, changeAmount)\n    {\n        this.x = (1 - changeAmount) * vInitial.x + changeAmount * vFinal.x;\n        this.y = (1 - changeAmount) * vInitial.y + changeAmount * vFinal.y;\n    },\n    interpolateSelf: function (vFinal, changeAmount)\n    {\n        this.interpolate(this, vFinal, changeAmount);\n    },\n    normalize: function (length)\n    {\n        if ((length = length || this.length())) this.divScalar(length);\n        else this.x = this.y = 0;\n    },\n    distanceSqr: function (v)\n    {\n        var x = this.x - v.x;\n        return x * x + (v = this.y - v.y) * v;\n    },\n    distance: function (v)\n    {\n        return Math.sqrt(this.distanceSqr(v));\n    },\n    near: function (v, refDistance) /*true if the distance between v1 and v2 is less than dist*/\n    {\n        return this.distanceSqr(v) < refDistance * refDistance;\n    },\n    equals: function (v)\n    {\n        return this.x === v.x && this.y === v.y;\n    },\n    toString: function ()\n    {\n        return 'V2(x=' + this.x + ', y=' + this.y + ')'"],[1,"if (this instanceof flux.Matrix) {\n        if (x) this.x = x;\n        if (y) this.y = y"],[0,";\n  "]],"start1":174,"start2":174,"length1":2253,"length2":103},{"diffs":[[0,"    }\n};"],[-1,""],[0,""],[1,"\n"]],"start1":275,"start2":275,"length1":8,"length2":9}]],"length":284,"saved":false}
{"ts":1349404017605,"patch":[[{"diffs":[[0,"xt)\n */\n"],[1," \n"],[0,"flux.Mat"]],"start1":146,"start2":146,"length1":16,"length2":18}]],"length":286,"saved":false}
{"ts":1349404020099,"patch":[[{"diffs":[[0," {\n "],[-1,"       if (x) this.x = x;\n        if (y) this.y = y;"],[0,"\n   "]],"start1":220,"start2":220,"length1":60,"length2":8}]],"length":234,"saved":false}
{"ts":1349405193712,"patch":[[{"diffs":[[0,"\n \nflux."],[-1,"Matrix"],[1,"Transform"],[0," = funct"]],"start1":153,"start2":153,"length1":22,"length2":25}]],"length":237,"saved":false}
{"ts":1349413678830,"patch":[[{"diffs":[[0,"lux."],[-1,"Transform"],[1,"Matrix"],[0," = f"]],"start1":157,"start2":157,"length1":17,"length2":14}]],"length":234,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349413797062,"patch":[[{"diffs":[[0,"x.Matrix"],[1,"3"],[0," = funct"]],"start1":159,"start2":159,"length1":16,"length2":17},{"diffs":[[0,"trix"],[1,"3"],[0,") {\n "],[1,"       "],[0,"\n   "]],"start1":216,"start2":216,"length1":13,"length2":21},{"diffs":[[0,"   }\n};\n"],[1,"flux.Matrix3.prototype = {\n    elements: null\n\n};\n\n"]],"start1":235,"start2":235,"length1":8,"length2":59}]],"length":294,"saved":false}
{"ts":1349413806959,"patch":[[{"diffs":[[0,"        "],[1,"this.elements = new Float32Array(9);"],[0,"\n    }\n}"]],"start1":225,"start2":225,"length1":16,"length2":52}]],"length":330,"saved":false}
{"ts":1349413984917,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"    if (this instanceof flux.Matrix3) {\n    "],[0,"    "]],"start1":181,"start2":181,"length1":52,"length2":8},{"diffs":[[0,"9);\n"],[-1,"    }\n"],[0,"};\nf"]],"start1":222,"start2":222,"length1":14,"length2":8}]],"length":280,"saved":false}
{"ts":1349413986543,"patch":[[{"diffs":[[0,"s: null\n"],[-1,"\n"],[0,"};\n\n"]],"start1":267,"start2":267,"length1":13,"length2":12}]],"length":279,"saved":false}
