{"ts":1348294706302,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Flux JavaScript Library\n * Copyright (c) 2010 Leonardo Dutra Constancio\n * MIT License (http://jsflux.googlecode.com/svn/trunk/mit-license.txt)\n */\n\nflux.Rectangle = function (x, y, width, height)\n{\n    if (this instanceof flux.Rectangle)\n    {\n        this.x = x || 0;\n        this.y = y || 0;\n        this.width = width || 0;\n        this.height = height || 0;\n    }\n};\nflux.Rectangle.prototype = {\n\n    set: function (rect)\n    {\n        this.setXYV2(rect);\n        this.setSize(rect);\n    },\n    setXY: flux.V2.prototype.setXY,\n    setXYV2: flux.V2.prototype.set,\n\n    setSize: function (width, height)\n    {\n        this.width = width;\n        this.height = height;\n    },\n    clone: function ()\n    {\n        return new flux.Rectangle(this.x, this.y, this.width, this.height);\n    },\n    inflate: function (width, height)\n    {\n        this.x -= width;\n        this.width += 2 * width;\n        this.y -= height;\n        this.height += 2 * height;\n    },\n    inflateV2: function (v2)\n    {\n        return this.inflate(v2.x, v2.y);\n    },\n    inflateScalar: function (s)\n    {\n        return this.inflate(this.width * s, this.height * s);\n    },\n    union: function (rect)\n    {\n        /* IMPORTANT: strings in a more/less comparison return false\n\t\t * keep the original value FROM \"THIS\" OBJECT IN CASE OF FALSE,\n\t\t * avoiding the use of <instanceof> or <typeof o === 'number'>\n\t\t */\n        this.x = rect.x < this.x ? rect.x : this.x;\n        this.y = rect.y < this.y ? rect.y : this.y;\n        this.width = this.width < rect.width ? rect.width : this.width;\n        this.height = this.height < rect.height ? rect.height : this.height;\n    },\n    contains: function (x, y)\n    {\n        return !(x < this.x || y < this.y || this.width < x || this.height < y);\n    },\n    containsV2: function (v2)\n    {\n        return !(v2.x < this.x || v2.y < this.y || this.x + this.width < v2.x || this.y + this.height < v2.y);\n    },\n    containsRect: function (rect)\n    {\n        return !(rect.x < this.x || rect.y < this.y || this.x + this.width < rect.x + rect.width || this.y + this.height < rect.y + rect.height);\n    },\n    intersects: function (rect) // TODO benchmark Rect.intersects.\n    {\n        return !(min(this.x + this.width, rect.x + rect.width) - max(this.x, rect.x) < 0 || min(this.y + this.height, rect.y + rect.height) - max(this.y, rect.y) < 0);\n    },\n    equals: function (rect)\n    {\n        return this.x === rect.x && this.y === rect.y && this.width === rect.width && this.height === rect.height;\n    }\n};"]],"start1":0,"start2":0,"length1":0,"length2":2531}]],"length":2531}
